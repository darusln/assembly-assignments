     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; if (c-a) <= 10 then e = 5* (b+1) else e = 12/(a-6)
    14                                      ; a byte, b word, c word, d byte, e doubleword, f byte
    15 00000000 03                          a db 3
    16 00000001 FEFF                        b dw -2
    17 00000003 0F00                        c dw 15
    18 00000005 00000000                    e dd 0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; if (c-a) <= 10 then e = 5* (b+1) else e = 12/(a-6)
    24                                          
    25                                          ; (c-a)
    26 00000000 66A1[03000000]                  mov ax, word[c]
    27 00000006 660FBE1D[00000000]              movsx bx, byte[a]
    28 0000000E 6629D8                          sub ax, bx ; ax = c - a 
    29                                          
    30 00000011 6683F80A                        cmp ax, 10
    31                                          
    32 00000015 7E02                            jle ramurathen
    33 00000017 7F1D                            jg ramuraelse
    34                                          
    35                                          ramurathen:
    36                                              ; e = 5* (b+1)
    37 00000019 66A1[01000000]                      mov ax, word[b] ;ax = b
    38 0000001F 6683C001                            add ax, 1 ; ax = b + 1
    39 00000023 66B90500                            mov cx, 5
    40 00000027 66F7E9                              imul cx ; dx:ax = 5* (b+1)
    41 0000002A 6652                                push dx
    42 0000002C 6650                                push ax
    43 0000002E 58                                  pop eax
    44 0000002F A3[05000000]                        mov [e], eax
    45                                              
    46 00000034 EB17                            jmp myendif
    47                                          ramuraelse:
    48                                              ; e = 12/(a-6)
    49 00000036 8A1D[00000000]                      mov bl, [a]
    50 0000003C 80EB06                              sub bl, 6 ; bx = a-6
    51 0000003F 66B80C00                            mov ax, 12 ; ax = 12
    52 00000043 F6FB                                idiv bl ; al = cat, ah = rest
    53 00000045 0FBEC0                              movsx eax, al
    54 00000048 A2[05000000]                        mov [e], al
    55                                              
    56                                          myendif:
    57                                          
    58                                          ; exit(0)
    59 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
