     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a*[b+c+d/b]+d data types: a,b,c - byte, d - word
    14 00000000 FD                          a db -3
    15 00000001 06                          b db 6
    16 00000002 FF                          c db -1
    17 00000003 0C00                        d dw 12
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; a*[b+c+d/b]+d data types: a,b,c - byte, d - word
    23                                          
    24                                          ; b + c
    25 00000000 8A1D[01000000]                  mov bl, [b] ; bl = b
    26 00000006 021D[02000000]                  add bl, [c] ; bl = b + c
    27                                          
    28                                          ; d/b
    29 0000000C 66A1[03000000]                  mov ax, [d] ; ax = d
    30 00000012 6699                            cwd ; dx:ax = d
    31 00000014 660FBE0D[01000000]              movsx cx, byte[b] ; cx = b
    32 0000001C 66F7F9                          idiv cx ; dx:ax/cx - in ax catul si dx restul
    33                                          
    34                                          ; b+c+d/b
    35 0000001F 660FBEDB                        movsx bx, bl ; bx = bl = b + c
    36 00000023 6601C3                          add bx, ax ; bx = bx + ax = b+c+d/b
    37                                          
    38                                          ; a*[b+c+d/b]
    39 00000026 A0[00000000]                    mov al, [a] ; al = a
    40 0000002B 660FBEC0                        movsx ax, al ; ax = al = a
    41 0000002F 66F7EB                          imul bx ; dx:ax = ax*bx = a*[b+c+d/b]
    42                                          
    43 00000032 6652                            push dx
    44 00000034 6650                            push ax
    45 00000036 58                              pop eax ; eax = dx:ax = a*[b+c+d/b]
    46                                          
    47 00000037 0FBF1D[03000000]                movsx ebx, word[d] ;ebx = d
    48 0000003E 01D8                            add eax, ebx ; eax = eax+ebx = a*[b+c+d/b]
    49                                          
    50                                          ; exit(0)
    51 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
